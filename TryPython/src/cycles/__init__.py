"""# поиск минимума в списке(можно использовать min, или отсортировать список по возростанию и взять первый элемент.
# но я хочу тут воспроизвести алгоритм)
if __name__ == '__main__':
    # создаем список, который мы заполним с клавиатуры
    a = [int(i) for i in input().split()]
    m = a[0]  # создаем переменную и присваиваем ей значение первого элемента списка( будем считать , что изначально
    # это самый маленький элемент)
    # далее мы проходим по всем элементам и сравнивать с нашим минимумом(переменной m)
    for x in a:
        if m > x:
            m = x
print(m)
"""

"""
САПЕР
"""

# размеры таблицы и количество мин
# n - строки, m- столбцы, k - количество координат мин
# читаем строку. разбиваем элементы с помощью пробела. и каждый элемент переводим в целое число
n, m, k = [int(i) for i in input().split()]
# Создаем двумерный массив(генерим n списков, соответствующие n строкам и в каждой строке генерим m нулевых значений)
a = [[0 for j in range(m)] for i in range(n)]

# далее мы прочитаем координаты расположения мин, поместим их в таблицу , обозначив , как -1
for i in range(k):
    # читаем номер строки и номер столбца(т.к у нас в таблице счет идет от 0. мы сразу вычтем 1, чтобы row и col
    # начинались с 0)
    row, col = (int(i) - 1 for i in input().split())
    # в каждый ячейку соответсвующую нашим координатам запишем -1
    a[row][col] = -1
# далее мы хотим посчитать в пустой ячейке. сколько по соседству с ней находится мин
for i in range(n):
    for j in range(m):
        # если в клетке стоит 0, то мы перебираем все соседние клетки со смещением +-1 наверх,вниз, влево,вправо
        if a[i][j] == 0:
            # перебираем все клетки со смещение по координате i (2, т.к последнее значение не вкл)
            for di in range(-1, 2):
                # смещение по координате j
                for dj in range(-1, 2):
                    # номер строки
                    ai = i + di
                    # номер столбца
                    aj = j + dj
                    # далее проверим, не вышла ли ячейка с координатами (ai;aj) за пределы, если нет , то проверим,
                    # есть ли там мина
                    if 0 <= ai < n and 0 <= aj < m and a[ai][aj] == -1:
                        a[i][j] += 1

# проходим все элементы, если в ячейке -1, то выводим звездочку и остаемся на тойже строке , если в ячейке нет мины,
# то ставим (.) , иначе выводим ячейку в котрой написано количество мин с ней находящийся
for i in range(n):
    for j in range(m):
        if a[i][j] == -1:
            print("*", end="")
        elif a[i][j] == 0:
            print(".", end="")
        else:
            print(a[i][j], end="")
    print()




# Напишите программу, которая считывает с клавиатуры два числа a и b, считает и выводит на консоль среднее
# арифметическое всех чисел из отрезка [a;b], которые делятся на 3.

# В приведенном ниже примере среднее арифметическое считается для чисел на отрезке [−5;12]. Всего чисел, делящихся на
#  3, на этом отрезке 6: −3,0,3,6,9,12. Их среднее арифметическое равно 4.5
#
# На вход программе подаются интервалы, внутри которых всегда есть хотя бы одно число, которое делится на 3.﻿
# if __name__ == '__main__':
#     a, b = int(input()), int(input())
#     s = 0
#     count = 0
#     for i in range(a, b + 1):
#         if i % 3 == 0:
#             count += 1
#             s += i
#     print(s/count)


"""Когда Павел учился в школе, он запоминал таблицу умножения прямоугольными блоками. Для тренировок ему бы очень
пригодилась программа, которая показывала бы блок таблицы умножения.

Напишите программу, на вход которой даются четыре числа a, b, c и d, каждое в своей строке. Программа должна вывести
фрагмент таблицы умножения для всех чисел отрезка [a;b] на все числа отрезка [c;d].

Числа a, b, c и d являются натуральными и не превосходят 10, a≤b, c≤d.

Следуйте формату вывода из примера, для разделения элементов внутри строки используйте '\t' — символ табуляции.
Заметьте, что левым столбцом и верхней строкой выводятся сами числа из заданных отрезков — заголовочные столбец и
строка таблицы.﻿



if __name__ == '__main__':
    a = int(input())
    b = int(input())
    c = int(input())
    d = int(input())
    for i in range(c, d + 1):
        print('\t' + str(i), end='')
    print(end='\n')
    for j in range(a, b + 1):
        print(str(j) + '\t', end='')
        for j in range(c, d + 1):
            print(str(i * j), end='\t')
        print(end='\n')
"""

# Какое значение будет у переменной i после выполнения фрагмента программы?
# ответ 13
# Сколько итераций цикла будет выполнено в этом фрагменте программы?
# i = 0
# while i <= 10:
#     i = i + 1
#     if i > 7:
#         i = i + 2

# выводит половинку елочки елочку - счетчиком
# c = 1
# while c <= 6:
#     print("*"*c)
#     c += 1

# тожесамое но без счетчика
# n = int(input())
# stars = "*"
# while len(stars) <= n:
#     print(stars)
#     stars += "*"


# i = 0
# while i < 5:
#     print('*')
#     if i % 2 == 0:
#         print('**')
#     if i > 2:
#         print('***')
#     i = i + 1

# Напишите программу, которая считывает со стандартного ввода целые числа, по одному числу в строке, и после первого
# введенного нуля выводит сумму полученных на вход чисел.
# s = 0
# i = int(input())
# while i != 0:
#     s += i
#     i = int(input())
# print(s)


"""
# находим наименьший общий делитель
def lcm(a, b):
    m = a * b
    while a != 0 and b != 0:
        if a > b:
            a %= b
        else:
            b %= a
    return m // (a + b)


x = int(input('a='))
y = int(input('b='))
print('НОК:', lcm(x, y))



#таже задача
a=int(input())
b=int(input())
m=a
if a==b:   # если оба значения (a и b) равны, выводим сразу это значение, и программа завершается.
    print(m)
    # иначе, при помощи цикла, прибавляем к одному из значений(a или b) его же значение,
else:      # а+а+... или b+b+...до тех пор, пока сумма не будет кратной введенным значениям a и b
    while m%a!=0 or m%b!=0: # ТАКОЙ способ позволяет не прерывать цикл. Ниже пояснение.
        m=m+a
    print(m)

    # конструкция m%a!=0 or m%b!=0 - позволяет производить цикл до момента, когда оба условия одновременно
    # станут False. Потому что помним(!!!), что цикл While работает только когда условие в нем True, если
    # становится False, то блок While перестает работать.

    # То есть, знаем что or - это суммирование(0+0=0, 0+1=1, 1+1=1), and - это умножение (0*0=0, 0*1=0, 1*1=1),
    # not - просто меняет значение на противоположное. В нашем примере у нас or.
    # Возвращаясь к нашему примеру m%a!=0 or m%b!=0, когда находится общее минимальное делимое число, то?
    # результат в условие станет следующий - False и False, то есть, False+False, плюсуем потому что or(помним)
    # а значит 0+0=0, а ноль это False, при котором циклл While прекращает свою работу.
    # А пока он дошел до этого момента, он пербирал, к примеру, такие варианты,
    # как False+True=True, True+False=True, при которых цикл продолжал работать, потому как True.

"""

"""
# программка показывает работу операторов continue и break
i = 0
numb = int(input('Введите кол-во желаемых выражений: '))
print('Число выражений:', numb)
while i < numb:
    a, b = input('Введите два числа через пробел: ').split()
    a = int(a)
    b = int(b)
    if (a == 0) and (b == 0):
        print('Окончание работы. ')
        break
    if (a == 0) or (b == 0):
        print('Игнорирую')
        continue
    print(a * b)
    print('Засчитано, ', end='')
    i += 1
    print('осталось выражений: ', numb - i)
else:
    print('Кол-во выражений исчерпано')

"""

"""
i = 0
s = 0
while i < 10:
    i = i + 1
    s = s + i
    if s > 15:
        break
    i = i + 1
print(i)
"""

# i = 0
# s = 0
# while i < 10:
#     i = i + 1
#     s = s + i
#     if s > 15:
#         continue
#     i = i + 1
# print(i)

"""


# Напишите программу, которая считывает целые числа с консоли по одному числу в строке.
# 
# Для каждого введённого числа проверить:
# если число меньше 10, то пропускаем это число;
# если число больше 100, то прекращаем считывать числа;
# в остальных случаях вывести это число обратно на консоль в отдельной строке.

while True:
    s = int(input())
    if s < 10:
        continue
    if s > 100:
        break
    else:
        print(s)
"""
